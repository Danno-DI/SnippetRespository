//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SnippetRepository
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace SnippetRepository.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The 'Snippet' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SnippetRepository.Web.Services")]
    public sealed partial class Snippet : Entity
    {
        
        private string _code;
        
        private DateTime _dateAdded;
        
        private DateTime _dateLastViewed;
        
        private Nullable<DateTime> _dateModified;
        
        private string _description;
        
        private int _id;
        
        private string _source;
        
        private string _tags;
        
        private string _title;
        
        private string _usage;
        
        private short _views;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDateAddedChanging(DateTime value);
        partial void OnDateAddedChanged();
        partial void OnDateLastViewedChanging(DateTime value);
        partial void OnDateLastViewedChanged();
        partial void OnDateModifiedChanging(Nullable<DateTime> value);
        partial void OnDateModifiedChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnSourceChanging(string value);
        partial void OnSourceChanged();
        partial void OnTagsChanging(string value);
        partial void OnTagsChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUsageChanging(string value);
        partial void OnUsageChanged();
        partial void OnViewsChanging(short value);
        partial void OnViewsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Snippet"/> class.
        /// </summary>
        public Snippet()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateAdded' value.
        /// </summary>
        [DataMember()]
        public DateTime DateAdded
        {
            get
            {
                return this._dateAdded;
            }
            set
            {
                if ((this._dateAdded != value))
                {
                    this.OnDateAddedChanging(value);
                    this.RaiseDataMemberChanging("DateAdded");
                    this.ValidateProperty("DateAdded", value);
                    this._dateAdded = value;
                    this.RaiseDataMemberChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateLastViewed' value.
        /// </summary>
        [DataMember()]
        public DateTime DateLastViewed
        {
            get
            {
                return this._dateLastViewed;
            }
            set
            {
                if ((this._dateLastViewed != value))
                {
                    this.OnDateLastViewedChanging(value);
                    this.RaiseDataMemberChanging("DateLastViewed");
                    this.ValidateProperty("DateLastViewed", value);
                    this._dateLastViewed = value;
                    this.RaiseDataMemberChanged("DateLastViewed");
                    this.OnDateLastViewedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateModified' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateModified
        {
            get
            {
                return this._dateModified;
            }
            set
            {
                if ((this._dateModified != value))
                {
                    this.OnDateModifiedChanging(value);
                    this.RaiseDataMemberChanging("DateModified");
                    this.ValidateProperty("DateModified", value);
                    this._dateModified = value;
                    this.RaiseDataMemberChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Source' value.
        /// </summary>
        [DataMember()]
        public string Source
        {
            get
            {
                return this._source;
            }
            set
            {
                if ((this._source != value))
                {
                    this.OnSourceChanging(value);
                    this.RaiseDataMemberChanging("Source");
                    this.ValidateProperty("Source", value);
                    this._source = value;
                    this.RaiseDataMemberChanged("Source");
                    this.OnSourceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Tags' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Tags
        {
            get
            {
                return this._tags;
            }
            set
            {
                if ((this._tags != value))
                {
                    this.OnTagsChanging(value);
                    this.RaiseDataMemberChanging("Tags");
                    this.ValidateProperty("Tags", value);
                    this._tags = value;
                    this.RaiseDataMemberChanged("Tags");
                    this.OnTagsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Usage' value.
        /// </summary>
        [DataMember()]
        public string Usage
        {
            get
            {
                return this._usage;
            }
            set
            {
                if ((this._usage != value))
                {
                    this.OnUsageChanging(value);
                    this.RaiseDataMemberChanging("Usage");
                    this.ValidateProperty("Usage", value);
                    this._usage = value;
                    this.RaiseDataMemberChanged("Usage");
                    this.OnUsageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Views' value.
        /// </summary>
        [DataMember()]
        public short Views
        {
            get
            {
                return this._views;
            }
            set
            {
                if ((this._views != value))
                {
                    this.OnViewsChanging(value);
                    this.RaiseDataMemberChanging("Views");
                    this.ValidateProperty("Views", value);
                    this._views = value;
                    this.RaiseDataMemberChanged("Views");
                    this.OnViewsChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'SnippetRepositoryDomainService' domain service.
    /// </summary>
    public sealed partial class SnippetRepositoryDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SnippetRepositoryDomainContext"/> class.
        /// </summary>
        public SnippetRepositoryDomainContext() : 
                this(new WebDomainClient<ISnippetRepositoryDomainServiceContract>(new Uri("SnippetRepository-Web-Services-SnippetRepositoryDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SnippetRepositoryDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SnippetRepositoryDomainService service URI.</param>
        public SnippetRepositoryDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISnippetRepositoryDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SnippetRepositoryDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public SnippetRepositoryDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Snippet"/> entities that have been loaded into this <see cref="SnippetRepositoryDomainContext"/> instance.
        /// </summary>
        public EntitySet<Snippet> Snippets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Snippet>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Snippet"/> entities using the 'GetSnippets' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Snippet"/> entities.</returns>
        public EntityQuery<Snippet> GetSnippetsQuery()
        {
            this.ValidateMethod("GetSnippetsQuery", null);
            return base.CreateQuery<Snippet>("GetSnippets", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Snippet"/> entities using the 'GetSnippetsByTag' query.
        /// </summary>
        /// <param name="tag">The value for the 'tag' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Snippet"/> entities.</returns>
        public EntityQuery<Snippet> GetSnippetsByTagQuery(string tag)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("tag", tag);
            this.ValidateMethod("GetSnippetsByTagQuery", parameters);
            return base.CreateQuery<Snippet>("GetSnippetsByTag", parameters, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SnippetRepositoryDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SnippetRepositoryDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ISnippetRepositoryDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSnippets' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SnippetRepositoryDomainService/GetSnippetsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SnippetRepositoryDomainService/GetSnippets", ReplyAction="http://tempuri.org/SnippetRepositoryDomainService/GetSnippetsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSnippets(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSnippets'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSnippets'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSnippets' operation.</returns>
            QueryResult<Snippet> EndGetSnippets(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSnippetsByTag' operation.
            /// </summary>
            /// <param name="tag">The value for the 'tag' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SnippetRepositoryDomainService/GetSnippetsByTagDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SnippetRepositoryDomainService/GetSnippetsByTag", ReplyAction="http://tempuri.org/SnippetRepositoryDomainService/GetSnippetsByTagResponse")]
            [WebGet()]
            IAsyncResult BeginGetSnippetsByTag(string tag, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSnippetsByTag'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSnippetsByTag'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSnippetsByTag' operation.</returns>
            QueryResult<Snippet> EndGetSnippetsByTag(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SnippetRepositoryDomainService/SubmitChangesDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SnippetRepositoryDomainService/SubmitChanges", ReplyAction="http://tempuri.org/SnippetRepositoryDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SnippetRepositoryDomainContextEntityContainer : EntityContainer
        {
            
            public SnippetRepositoryDomainContextEntityContainer()
            {
                this.CreateEntitySet<Snippet>(EntitySetOperations.All);
            }
        }
    }
}
